#@ load("@ytt:assert", "assert")
#@ load("@ytt:data", "data")
#@ load("@ytt:library", "library")
#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:template", "template")
#@ load("@ytt:yaml", "yaml")

#@ def capi_host():
#@   if len(data.values.capi.database.host) > 0:
#@     return data.values.capi.database.host
#@   elif data.values.cf_db.enabled == True:
#@     return "cf-db-postgresql.cf-db.svc.cluster.local"
#@   else:
#@     assert.fail("When cf_db.enabled is false, expected a capi.database.host to be provided, but was not.")
#@   end
#@ end

#@ def capi_values():
#@ if/end data.values.images.capi:
images:
  ccng: #@ data.values.images.capi
  nginx: #@ data.values.images.nginx

namespace: #@ data.values.system_namespace

system_domain: #@ data.values.system_domain
app_domains:
#@ for/end domain in data.values.app_domains:
#@overlay/append
- #@ domain

blobstore:
  endpoint: #@ data.values.capi.blobstore.endpoint
  access_key_id: #@ data.values.cf_blobstore.access_key
  secret_access_key: #@ data.values.cf_blobstore.secret_key

ccdb:
  adapter: #@ data.values.capi.database.adapter
  host: #@ capi_host()
  port: #@ data.values.capi.database.port
  user: #@ data.values.capi.database.user
  password: #@ data.values.capi.database.password
  database: #@ data.values.capi.database.name

eirini:
  serverCerts:
    secretName: eirini-internal-tls-certs

apiServer:
  opi:
    client_cert: #@ data.values.eirini.tls.crt
    client_key: #@ data.values.eirini.tls.key
    ca: #@ data.values.system_certificate.ca

uaa:
  serverCerts:
    secretName: uaa-certs
  clients:
    cloud_controller_username_lookup:
      secret: #@ data.values.uaa.admin_client_secret
#@ end

#@ def ccng_config():
#@overlay/match missing_ok=True
opi:
  url: #@ "https://eirini.{}.svc.cluster.local:8085".format(data.values.system_namespace)
buildpacks:
  fog_connection:
    endpoint: #@ data.values.capi.blobstore.endpoint
droplets:
  fog_connection:
    endpoint: #@ data.values.capi.blobstore.endpoint
packages:
  fog_connection:
    endpoint: #@ data.values.capi.blobstore.endpoint
resource_pool:
  fog_connection:
    endpoint: #@ data.values.capi.blobstore.endpoint

#! TODO: kpack
#@overlay/match missing_ok=True
kubernetes:
  host_url: https://master.default.svc.cluster-domain.example
  service_account:
    name: 'fake-opi-service-account'
    token: 'fake-token'
  ca_file: "spec/fixtures/certs/kubernetes_ca.crt"
  kpack:
    builder_namespace: 'cf-workloads'
    registry_service_account_name: 'registry-service-account'
    registry_tag_base: #@ "registry." + data.values.system_domain
#@ end

#@ def overlay_ccng_config(old, new):
#@   return yaml.encode(overlay.apply(yaml.decode(old), ccng_config()))
#@ end

#@ capi = library.get("github.com/cloudfoundry/capi-k8s-release")
--- #@ template.replace(capi.with_data_values(capi_values()).eval())

#! overlay Eirini URL fix
#@overlay/match by=overlay.subset({"kind":"ConfigMap", "metadata":{"name":"cloud-controller-ng-yaml"}})
---
data:
  #@overlay/replace via=overlay_ccng_config
  cloud_controller_ng.yml:

#! expose CAPI under the system domain
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: capi-external-virtual-service
  namespace: #@ data.values.system_namespace
spec:
  hosts:
  - #@ "api." + data.values.system_domain
  gateways:
  - #@ data.values.system_namespace + "/istio-ingressgateway"
  http:
  - route:
    - destination:
        host: #@ "capi." + data.values.system_namespace + ".svc.cluster.local"
        port:
          number: 80

#! TODO: kpack
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: registry-service-account
  namespace: cf-workloads
---
apiVersion: build.pivotal.io/v1alpha1
kind: Builder
metadata:
  name: capi-builder
  namespace: cf-workloads
spec:
  image: cloudfoundry/cnb:bionic

