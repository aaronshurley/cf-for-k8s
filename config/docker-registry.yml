#@ load("@ytt:data", "data")
#@ load("@ytt:library", "library")
#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:template", "template")
#@ load("@ytt:base64", "base64")

#@ def place_in_system_namespace():
#@overlay/match by=overlay.all,expects="1+"
---
metadata:
  #@overlay/match missing_ok=True
  namespace: docker-registry
#@ end

#@ registry = library.get("docker-registry")
--- #@ template.replace(overlay.apply(registry.eval(), place_in_system_namespace()))

#! overlay docker registry secret
#@overlay/match by=overlay.subset({"kind":"Secret", "metadata":{"name":"docker-registry-secret"}})
---
data:
  #@overlay/replace
  haSharedSecret: #@ base64.encode(data.values.docker_registry.http_secret)

---
apiVersion: v1
kind: Namespace
metadata:
  name: docker-registry

#! TODO: this gateway is needed why???
---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: istio-ingressgateway
  namespace: docker-registry
spec:
  selector:
    istio: ingressgateway
  servers:
  - hosts:
    - #@ "registry.{}".format(data.values.system_domain)
    - #@ "*.registry.{}".format(data.values.system_domain)
    port:
      name: http
      number: 80
      protocol: HTTP
  - hosts:
    - #@ "registry.{}".format(data.values.system_domain)
    - #@ "*.registry.{}".format(data.values.system_domain)
    port:
      name: https
      number: 443
      protocol: HTTPS
    tls:
      mode: SIMPLE
      privateKey: /etc/istio/ingressgateway-certs/tls.key
      serverCertificate: /etc/istio/ingressgateway-certs/tls.crt

#! expose docker-registry to allow nodes to pull images
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: docker-registry-external-virtual-service
  namespace: docker-registry
spec:
  hosts:
  - #@ "registry." + data.values.system_domain
  gateways:
  - "docker-registry/istio-ingressgateway"
  http:
  - route:
    - destination:
        host: docker-registry.docker-registry.svc.cluster.local
        port:
          number: 5000

#! fix docker registry service's port naming issue: https://discuss.istio.io/t/upstream-connect-error-or-disconnect-reset-before-headers-reset-reason-connection-termination/4434/4
#@overlay/match by=overlay.subset({"kind":"Service", "metadata":{"name":"docker-registry"}})
---
spec:
  #@overlay/replace
  ports:
  - name: http
    protocol: TCP
    port: 5000
    targetPort: 5000
